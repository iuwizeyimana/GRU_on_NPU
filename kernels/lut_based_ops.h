//===---  exp_lut.h - get exponential values from loopup tables ---===//
//
// This file is licensed under the Apache License v2.0 with LLVM Exceptions
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// (c) Copyright 2023 Xilinx Inc.
//
//
//===----------------------------------------------------------------------===//
// This is the implementation of getting exponential values for a bfloat16
// vector from exponential lookup tables.
//===----------------------------------------------------------------------===//
#ifndef __LUT_BASED_OPS_H__
#define __LUT_BASED_OPS_H__

#include <aie_api/aie.hpp>

//extern float tanh_lut_ab[];
//extern float tanh_lut_cd[];

// Tanh look up tables: Divides into 32 segments between [-4,4], bank size:
// (32*2*2*4)*2=1k, one lut=512B
float chess_storage(% chess_alignof(v32int8)) tanh_lut_ab[128] = {
    0.00000000000000000000000000000000, -1.00000000000000000000000000000000,
    0.00283813476562500000000000000000, -0.98828125000000000000000000000000,
    0.00000000000000000000000000000000, -1.00000000000000000000000000000000,
    0.00283813476562500000000000000000, -0.98828125000000000000000000000000,
    0.00509643554687500000000000000000, -0.98046875000000000000000000000000,
    0.00750732421875000000000000000000, -0.97265625000000000000000000000000,
    0.00509643554687500000000000000000, -0.98046875000000000000000000000000,
    0.00750732421875000000000000000000, -0.97265625000000000000000000000000,
    0.01269531250000000000000000000000, -0.95703125000000000000000000000000,
    0.02124023437500000000000000000000, -0.93359375000000000000000000000000,
    0.01269531250000000000000000000000, -0.95703125000000000000000000000000,
    0.02124023437500000000000000000000, -0.93359375000000000000000000000000,
    0.03540039062500000000000000000000, -0.89843750000000000000000000000000,
    0.05639648437500000000000000000000, -0.85156250000000000000000000000000,
    0.03540039062500000000000000000000, -0.89843750000000000000000000000000,
    0.05639648437500000000000000000000, -0.85156250000000000000000000000000,
    0.09179687500000000000000000000000, -0.78125000000000000000000000000000,
    0.14550781250000000000000000000000, -0.68750000000000000000000000000000,
    0.09179687500000000000000000000000, -0.78125000000000000000000000000000,
    0.14550781250000000000000000000000, -0.68750000000000000000000000000000,
    0.22949218750000000000000000000000, -0.56250000000000000000000000000000,
    0.34765625000000000000000000000000, -0.41601562500000000000000000000000,
    0.22949218750000000000000000000000, -0.56250000000000000000000000000000,
    0.34765625000000000000000000000000, -0.41601562500000000000000000000000,
    0.50390625000000000000000000000000, -0.25976562500000000000000000000000,
    0.69140625000000000000000000000000, -0.11962890625000000000000000000000,
    0.50390625000000000000000000000000, -0.25976562500000000000000000000000,
    0.69140625000000000000000000000000, -0.11962890625000000000000000000000,
    0.86718750000000000000000000000000, -0.03076171875000000000000000000000,
    1.00000000000000000000000000000000, 0.00000000000000000000000000000000,
    0.86718750000000000000000000000000, -0.03076171875000000000000000000000,
    1.00000000000000000000000000000000, 0.00000000000000000000000000000000,
    1.00000000000000000000000000000000, 0.00000000000000000000000000000000,
    0.86718750000000000000000000000000, 0.03076171875000000000000000000000,
    1.00000000000000000000000000000000, 0.00000000000000000000000000000000,
    0.86718750000000000000000000000000, 0.03076171875000000000000000000000,
    0.69140625000000000000000000000000, 0.11962890625000000000000000000000,
    0.50390625000000000000000000000000, 0.25976562500000000000000000000000,
    0.69140625000000000000000000000000, 0.11962890625000000000000000000000,
    0.50390625000000000000000000000000, 0.25976562500000000000000000000000,
    0.34765625000000000000000000000000, 0.41601562500000000000000000000000,
    0.22949218750000000000000000000000, 0.56250000000000000000000000000000,
    0.34765625000000000000000000000000, 0.41601562500000000000000000000000,
    0.22949218750000000000000000000000, 0.56250000000000000000000000000000,
    0.14550781250000000000000000000000, 0.68750000000000000000000000000000,
    0.09179687500000000000000000000000, 0.78125000000000000000000000000000,
    0.14550781250000000000000000000000, 0.68750000000000000000000000000000,
    0.09179687500000000000000000000000, 0.78125000000000000000000000000000,
    0.05639648437500000000000000000000, 0.85156250000000000000000000000000,
    0.03540039062500000000000000000000, 0.89843750000000000000000000000000,
    0.05639648437500000000000000000000, 0.85156250000000000000000000000000,
    0.03540039062500000000000000000000, 0.89843750000000000000000000000000,
    0.02124023437500000000000000000000, 0.93359375000000000000000000000000,
    0.01269531250000000000000000000000, 0.95703125000000000000000000000000,
    0.02124023437500000000000000000000, 0.93359375000000000000000000000000,
    0.01269531250000000000000000000000, 0.95703125000000000000000000000000,
    0.00750732421875000000000000000000, 0.97265625000000000000000000000000,
    0.00509643554687500000000000000000, 0.98046875000000000000000000000000,
    0.00750732421875000000000000000000, 0.97265625000000000000000000000000,
    0.00509643554687500000000000000000, 0.98046875000000000000000000000000,
    0.00283813476562500000000000000000, 0.98828125000000000000000000000000,
    0.00000000000000000000000000000000, 1.00000000000000000000000000000000,
    0.00283813476562500000000000000000, 0.98828125000000000000000000000000,
    0.00000000000000000000000000000000, 1.00000000000000000000000000000000,
};

float chess_storage(% chess_alignof(v32int8)) tanh_lut_cd[128] = {
    0.00000000000000000000000000000000, -1.00000000000000000000000000000000,
    0.00283813476562500000000000000000, -0.98828125000000000000000000000000,
    0.00000000000000000000000000000000, -1.00000000000000000000000000000000,
    0.00283813476562500000000000000000, -0.98828125000000000000000000000000,
    0.00509643554687500000000000000000, -0.98046875000000000000000000000000,
    0.00750732421875000000000000000000, -0.97265625000000000000000000000000,
    0.00509643554687500000000000000000, -0.98046875000000000000000000000000,
    0.00750732421875000000000000000000, -0.97265625000000000000000000000000,
    0.01269531250000000000000000000000, -0.95703125000000000000000000000000,
    0.02124023437500000000000000000000, -0.93359375000000000000000000000000,
    0.01269531250000000000000000000000, -0.95703125000000000000000000000000,
    0.02124023437500000000000000000000, -0.93359375000000000000000000000000,
    0.03540039062500000000000000000000, -0.89843750000000000000000000000000,
    0.05639648437500000000000000000000, -0.85156250000000000000000000000000,
    0.03540039062500000000000000000000, -0.89843750000000000000000000000000,
    0.05639648437500000000000000000000, -0.85156250000000000000000000000000,
    0.09179687500000000000000000000000, -0.78125000000000000000000000000000,
    0.14550781250000000000000000000000, -0.68750000000000000000000000000000,
    0.09179687500000000000000000000000, -0.78125000000000000000000000000000,
    0.14550781250000000000000000000000, -0.68750000000000000000000000000000,
    0.22949218750000000000000000000000, -0.56250000000000000000000000000000,
    0.34765625000000000000000000000000, -0.41601562500000000000000000000000,
    0.22949218750000000000000000000000, -0.56250000000000000000000000000000,
    0.34765625000000000000000000000000, -0.41601562500000000000000000000000,
    0.50390625000000000000000000000000, -0.25976562500000000000000000000000,
    0.69140625000000000000000000000000, -0.11962890625000000000000000000000,
    0.50390625000000000000000000000000, -0.25976562500000000000000000000000,
    0.69140625000000000000000000000000, -0.11962890625000000000000000000000,
    0.86718750000000000000000000000000, -0.03076171875000000000000000000000,
    1.00000000000000000000000000000000, 0.00000000000000000000000000000000,
    0.86718750000000000000000000000000, -0.03076171875000000000000000000000,
    1.00000000000000000000000000000000, 0.00000000000000000000000000000000,
    1.00000000000000000000000000000000, 0.00000000000000000000000000000000,
    0.86718750000000000000000000000000, 0.03076171875000000000000000000000,
    1.00000000000000000000000000000000, 0.00000000000000000000000000000000,
    0.86718750000000000000000000000000, 0.03076171875000000000000000000000,
    0.69140625000000000000000000000000, 0.11962890625000000000000000000000,
    0.50390625000000000000000000000000, 0.25976562500000000000000000000000,
    0.69140625000000000000000000000000, 0.11962890625000000000000000000000,
    0.50390625000000000000000000000000, 0.25976562500000000000000000000000,
    0.34765625000000000000000000000000, 0.41601562500000000000000000000000,
    0.22949218750000000000000000000000, 0.56250000000000000000000000000000,
    0.34765625000000000000000000000000, 0.41601562500000000000000000000000,
    0.22949218750000000000000000000000, 0.56250000000000000000000000000000,
    0.14550781250000000000000000000000, 0.68750000000000000000000000000000,
    0.09179687500000000000000000000000, 0.78125000000000000000000000000000,
    0.14550781250000000000000000000000, 0.68750000000000000000000000000000,
    0.09179687500000000000000000000000, 0.78125000000000000000000000000000,
    0.05639648437500000000000000000000, 0.85156250000000000000000000000000,
    0.03540039062500000000000000000000, 0.89843750000000000000000000000000,
    0.05639648437500000000000000000000, 0.85156250000000000000000000000000,
    0.03540039062500000000000000000000, 0.89843750000000000000000000000000,
    0.02124023437500000000000000000000, 0.93359375000000000000000000000000,
    0.01269531250000000000000000000000, 0.95703125000000000000000000000000,
    0.02124023437500000000000000000000, 0.93359375000000000000000000000000,
    0.01269531250000000000000000000000, 0.95703125000000000000000000000000,
    0.00750732421875000000000000000000, 0.97265625000000000000000000000000,
    0.00509643554687500000000000000000, 0.98046875000000000000000000000000,
    0.00750732421875000000000000000000, 0.97265625000000000000000000000000,
    0.00509643554687500000000000000000, 0.98046875000000000000000000000000,
    0.00283813476562500000000000000000, 0.98828125000000000000000000000000,
    0.00000000000000000000000000000000, 1.00000000000000000000000000000000,
    0.00283813476562500000000000000000, 0.98828125000000000000000000000000,
    0.00000000000000000000000000000000, 1.00000000000000000000000000000000,
};


inline __attribute__((always_inline)) v16bfloat16
getTanhBf16(v16bfloat16 vInput) {
  aie::vector<bfloat16, 16> input = vInput;

  int step_bits = -2;
  int bias = 16;
  int data_size = 16;
  int LUT_elems = 32;
  int shift_offset = 0; // unused

  using lut_type = aie::lut<4, float, bfloat16>;

  lut_type test_lut(LUT_elems, (bfloat16 *)tanh_lut_ab,
                    (bfloat16 *)tanh_lut_cd);

  aie::linear_approx<bfloat16, lut_type> lin_aprox(test_lut, step_bits, bias,
                                                   shift_offset);

  aie::vector<bfloat16, 16> output =
      lin_aprox.compute(input).to_vector<bfloat16>();

  return (v16bfloat16)output;
}
#endif //__LUT_BASED_OPS_H__
